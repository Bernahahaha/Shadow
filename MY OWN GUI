-- ======================= Load Libraries =======================
local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/Beta.lua", true))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- ======================= Services =======================
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer

-- ======================= GUI Setup =======================
local guiWidth, guiHeight = 460, 350
local Window = Fluent:CreateWindow({
    Title = "ShadowCore Upgraded " .. Fluent.Version,
    SubTitle = "by Sin",
    TabWidth = 160,
    Size = UDim2.fromOffset(guiWidth, guiHeight),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})
local Options = Fluent.Options

-- ======================= Tabs =======================
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    PlayerTarget = Window:AddTab({ Title = "Targeting", Icon = "target" }),
    Protection = Window:AddTab({ Title = "Protection", Icon = "shield" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Forest = Window:AddTab({ Title = "99 Nights Forest", Icon = "trees" })
}

-- ======================= Feature State =======================
local State = {
    InfiniteJump = false,
    JumpMultiplier = 1,
    WalkSpeedEnabled = false,
    SprintEnabled = false,
    WalkSpeedValue = 16,
    PlayerESP = false,
    TrackDistance = false,
    AutoFollow = false,
    AimAtPlayer = false,
    HighlightPlayer = false,
    TargetDistance = 5,
    -- Protection Features
    AntiFling = false,
    AntiLoopKill = false,
    AntiVoid = false,
    AntiAFK = false,
    AntiTeleport = false,
    -- Forest Features
    KillAura = false,
    AutoLog = false,
}

local targetPlayer

-- ======================= Helper Functions =======================
local function getHumanoid(pl)
    local char = pl and pl.Character
    if char then return char:FindFirstChildOfClass("Humanoid") end
    return nil
end

local function getRoot(pl)
    return pl.Character and pl.Character:FindFirstChild("HumanoidRootPart")
end

local function getPlayerNames()
    local list = {}
    for _, pl in pairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer then table.insert(list, pl.Name) end
    end
    return list
end

-- ======================= Main Tab Features =======================
-- Infinite Jump
UserInputService.JumpRequest:Connect(function()
    if State.InfiniteJump then
        local hum = getHumanoid(LocalPlayer)
        if hum then
            pcall(function() hum:ChangeState(Enum.HumanoidStateType.Jumping) end)
            if hum.Parent:FindFirstChild("HumanoidRootPart") then
                hum.Parent.HumanoidRootPart.Velocity = Vector3.new(0,50*State.JumpMultiplier,0)
            end
        end
    end
end)
Tabs.Main:AddToggle("InfiniteJump", {Title="Infinite Jump", Default=false}):OnChanged(function(val) State.InfiniteJump = val end)
Tabs.Main:AddSlider("JumpMultiplier", {Title="Jump Multiplier", Min=1, Max=5, Default=1, Rounding=1}):OnChanged(function(val) State.JumpMultiplier = val end)

-- WalkSpeed + Sprint
Tabs.Main:AddToggle("WalkSpeed", {Title="WalkSpeed", Default=false}):OnChanged(function(val)
    State.WalkSpeedEnabled = val
    if not val and getHumanoid(LocalPlayer) then getHumanoid(LocalPlayer).WalkSpeed = 16 end
end)
Tabs.Main:AddSlider("WalkSpeedValue", {Title="WalkSpeed Value", Min=8, Max=200, Default=16, Rounding=1}):OnChanged(function(val) State.WalkSpeedValue = val end)
Tabs.Main:AddToggle("Sprint", {Title="Sprint (Hold Shift)", Default=false}):OnChanged(function(val) State.SprintEnabled = val end)
RunService.Heartbeat:Connect(function()
    local hum = getHumanoid(LocalPlayer)
    if hum and State.WalkSpeedEnabled then
        local speed = State.WalkSpeedValue
        if State.SprintEnabled and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then speed = speed*2 end
        hum.WalkSpeed = speed
    end
end)

-- ======================= Player ESP - Targeting Tab =======================
local PlayerESPEnabled = false
local ESPPlayers = {}

Tabs.PlayerTarget:AddToggle("PlayerESP", {
    Title = "Enable Player ESP",
    Description = "Highlights players with health bar and distance",
    Default = false,
    Callback = function(state)
        PlayerESPEnabled = state
        if not state then
            for _, data in pairs(ESPPlayers) do
                if data.Billboard then data.Billboard:Destroy() end
            end
            ESPPlayers = {}
        end
    end
})

-- Player ESP Colorpicker
local PlayerESPColor = Tabs.PlayerTarget:AddColorpicker("PlayerESPColor", {
    Title = "Player ESP Color",
    Description = "Color of player ESP name/distance text",
    Transparency = 0,
    Default = Color3.fromRGB(255, 255, 255)
})

local function CreateESPForPlayer(plr)
    if ESPPlayers[plr] then return end
    if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then return end
    local hrp = plr.Character.HumanoidRootPart

    local bb = Instance.new("BillboardGui")
    bb.Name = "SC_PlayerESP"
    bb.Adornee = hrp
    bb.Size = UDim2.new(0,120,0,36)
    bb.StudsOffset = Vector3.new(0,2,0)
    bb.AlwaysOnTop = true
    bb.Parent = hrp

    local nameLabel = Instance.new("TextLabel")
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(1,0,0.3,0)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextColor3 = PlayerESPColor.Value
    nameLabel.TextScaled = true
    nameLabel.Text = plr.Name
    nameLabel.Parent = bb

    local healthBar = Instance.new("Frame")
    healthBar.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
    healthBar.Size = UDim2.new(1,0,0.2,0)
    healthBar.Position = UDim2.new(0,0,0.3,0)
    healthBar.BorderSizePixel = 0
    healthBar.Parent = bb

    local distLabel = Instance.new("TextLabel")
    distLabel.BackgroundTransparency = 1
    distLabel.Size = UDim2.new(1,0,0.3,0)
    distLabel.Position = UDim2.new(0,0,0.5,0)
    distLabel.Font = Enum.Font.Gotham
    distLabel.TextColor3 = PlayerESPColor.Value
    distLabel.TextScaled = true
    distLabel.Text = "Distance: 0"
    distLabel.Parent = bb

    ESPPlayers[plr] = {Billboard = bb, HealthBar = healthBar, DistanceLabel = distLabel, NameLabel = nameLabel}
end

RunService.RenderStepped:Connect(function()
    if not PlayerESPEnabled then return end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Humanoid") then
            CreateESPForPlayer(plr)
            local hum = plr.Character.Humanoid
            local data = ESPPlayers[plr]
            if data then
                local healthRatio = math.clamp(hum.Health / (hum.MaxHealth or 1), 0, 1)
                data.HealthBar.Size = UDim2.new(healthRatio,0,0.2,0)
                if healthRatio > 0.6 then
                    data.HealthBar.BackgroundColor3 = Color3.fromRGB(0,255,0)
                elseif healthRatio > 0.3 then
                    data.HealthBar.BackgroundColor3 = Color3.fromRGB(255,255,0)
                else
                    data.HealthBar.BackgroundColor3 = Color3.fromRGB(255,0,0)
                end

                local dist = (plr.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
                data.DistanceLabel.Text = ("Distance: %.1f"):format(dist)

                if dist < 20 then
                    data.DistanceLabel.TextColor3 = Color3.fromRGB(0,255,0)
                elseif dist < 50 then
                    data.DistanceLabel.TextColor3 = Color3.fromRGB(255,255,0)
                else
                    data.DistanceLabel.TextColor3 = Color3.fromRGB(255,0,0)
                end

                data.NameLabel.TextColor3 = PlayerESPColor.Value
            end
        end
    end
end)

PlayerESPColor:OnChanged(function(newColor)
    for _, data in pairs(ESPPlayers) do
        if data.NameLabel then data.NameLabel.TextColor3 = newColor end
        if data.DistanceLabel then data.DistanceLabel.TextColor3 = newColor end
    end
end)
Tabs.Main:AddButton({
    Title = "Launch Into Sky",
    Description = "Send yourself flying up!",
    Callback = function()
        local root = getRoot()
        if root then 
            root.Velocity = Vector3.new(0, 200, 0) 
        end
    end
})
-- ======================= Forest Tab: Kill Aura & Trees =======================
local ForestTab = Tabs.Forest

-- Kill Aura
local KillAuraEnabled = false
local attackRange = 300
local attackCooldown = 0.5
local lastAttackTimes = {}
local useWhitelist = true
local attackAllAtOnce = false
local weaponPriority = {"Old Axe","Good Axe","Strong Axe","Spear","MorningStar","Laser Sword","Ice Sword","Katana"}
local allTargets = {"Bunny","Cultist","Wolf","Alpha Wolf","Bear","Polar Bear","Alien","Alien Elite","Arctic Fox","Black Robe Cultist","Red Robe Cultist","Crossbow Cultist"}
local targetWhitelist = {}
for _, n in ipairs(allTargets) do targetWhitelist[n] = true end

local function notify(title, text, duration)
    pcall(function() StarterGui:SetCore("SendNotification",{Title=title,Text=text,Duration=duration or 3}) end)
end

local function getHRP()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then return char.HumanoidRootPart end
    return nil
end

local function findBestWeapon()
    local inv = LocalPlayer:FindFirstChild("Inventory")
    if not inv then return nil end
    for _, w in ipairs(weaponPriority) do
        local f = inv:FindFirstChild(w)
        if f then return f end
    end
    return nil
end

local function isTargetValid(target, hrp)
    if not target or not target.PrimaryPart then return false end
    if useWhitelist and not targetWhitelist[target.Name] then return false end
    local dist = (target.PrimaryPart.Position - hrp.Position).Magnitude
    return dist <= attackRange
end

ForestTab:AddSlider("KA_Range",{Title="Attack Range",Min=50,Max=500,Default=attackRange,Rounding=0,Callback=function(v) attackRange=v end})
ForestTab:AddSlider("KA_Cooldown",{Title="Attack Cooldown",Min=0.1,Max=2,Default=attackCooldown,Rounding=2,Callback=function(v) attackCooldown=v end})
ForestTab:AddToggle("KA_Whitelist",{Title="Use Target Whitelist",Default=useWhitelist,Callback=function(v) useWhitelist=v end})
ForestTab:AddToggle("KA_AllAtOnce",{Title="Attack All Targets At Once",Default=attackAllAtOnce,Callback=function(v) attackAllAtOnce=v end})
ForestTab:AddDropdown("KA_WeaponPriority",{Title="Weapon Priority",Values=weaponPriority,Default=weaponPriority[1],Multi=false,Callback=function(val) notify("Kill Aura","Priority head set to: "..tostring(val),3) end})

ForestTab:AddToggle("KA_Enabled",{Title="Kill Aura",Default=false,Callback=function(enabled)
    KillAuraEnabled = enabled
    if enabled then
        notify("Kill Aura","Enabled",3)
        local RemoteToolDamage = ReplicatedStorage:FindFirstChild("RemoteEvents") and ReplicatedStorage.RemoteEvents:FindFirstChild("ToolDamageObject")
        task.spawn(function()
            while KillAuraEnabled do
                local hrp = getHRP()
                if not hrp or not RemoteToolDamage then task.wait(0.5) continue end
                local weapon = findBestWeapon()
                local ownerId = weapon and weapon:GetAttribute("Owner") or ""
                local charactersFolder = Workspace:FindFirstChild("Characters")
                if not charactersFolder then task.wait(0.5) continue end
                if attackAllAtOnce then
                    local hits=0
                    for _, tgt in ipairs(charactersFolder:GetChildren()) do
                        if isTargetValid(tgt,hrp) then
                            pcall(function() RemoteToolDamage:InvokeServer(tgt,weapon,"3_"..tostring(ownerId),tgt.PrimaryPart.CFrame) end)
                            hits+=1
                        end
                    end
                    if hits>0 then notify("Kill Aura",("Attacked %d targets."):format(hits),2) end
                    task.wait(attackCooldown)
                else
                    for _, tgt in ipairs(charactersFolder:GetChildren()) do
                        if isTargetValid(tgt,hrp) then
                            local now = tick()
                            if not lastAttackTimes[tgt] or (now-lastAttackTimes[tgt])>=attackCooldown then
                                pcall(function() RemoteToolDamage:InvokeServer(tgt,weapon,"3_"..tostring(ownerId),tgt.PrimaryPart.CFrame) end)
                                lastAttackTimes[tgt]=now
                                task.wait(0.05)
                            end
                        end
                    end
                    task.wait(0.05)
                end
            end
        end)
    else
        notify("Kill Aura","Disabled",3)
        lastAttackTimes={}
    end
end})

-- Auto Log button fix
ForestTab:AddButton({
    Title="Auto Log",
    Description="Brings all Log models to your position",
    Callback=function()
        local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not root then return end
        local count=0
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("BasePart") and obj.Name=="Log" then
                obj.CFrame = root.CFrame + Vector3.new(0,5,0)
                count+=1
            end
        end
        Fluent:Notify({Title="Auto Log",Content="Brought "..count.." log(s) to your location!",Duration=4})
    end
})
-- ======================= Gluttony (Auto Consume Dropped Food) - Forest Tab =======================
local GluttonyEnabled = false
local consumeRange = 50
local validFoods = {"Morsel","Steak","Carrot","Berry","Cooked Morsel","Cooked Steak"}

local function isFood(item)
    for _, name in ipairs(validFoods) do
        if item.Name == name then return true end
    end
    return false
end

Tabs.Forest:AddSection("Gluttony")
Tabs.Forest:AddSlider("Gluttony_Range", {
    Title = "Consume Range",
    Description = "Max distance to auto eat dropped food",
    Default = consumeRange, Min = 10, Max = 300,
    Rounding = 0,
    Callback = function(v) consumeRange = v end
})
Tabs.Forest:AddToggle("Gluttony_Enabled", {
    Title = "Gluttony",
    Default = false,
    Callback = function(enabled)
        GluttonyEnabled = enabled
        if enabled then
            local RemoteConsume = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestConsumeItem")
            task.spawn(function()
                while GluttonyEnabled do
                    local hrp = getHRP()
                    if hrp and Workspace:FindFirstChild("Items") then
                        for _, drop in ipairs(Workspace.Items:GetChildren()) do
                            if isFood(drop) and drop.PrimaryPart then
                                local dist = (drop.PrimaryPart.Position - hrp.Position).Magnitude
                                if dist <= consumeRange then
                                    local args = {drop}
                                    pcall(function()
                                        RemoteConsume:InvokeServer(unpack(args))
                                    end)
                                    task.wait(0.5)
                                end
                            end
                        end
                    end
                    task.wait(1)
                end
            end)
        end
    end
})
-- ======================= Teleport - Forest Tab =======================
do
    Tabs.Forest:AddInput("TeleportInput", {
        Title = "Teleport To (x,y,z)",
        Default = "0,0,0",
        Placeholder = "Enter coordinates like 0,5,0",
        Callback = function(Value)
            local player = game.Players.LocalPlayer
            local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if root then
                local x, y, z = Value:match("([^,]+),([^,]+),([^,]+)")
                x, y, z = tonumber(x), tonumber(y), tonumber(z)
                if x and y and z then 
                    root.CFrame = CFrame.new(x,y,z) 
                    print("Teleported to:", x, y, z) 
                else 
                    print("Invalid coordinates!") 
                end
            end
        end
    })

    Tabs.Forest:AddKeybind("TeleportKey", {
        Title = "Teleport Key",
        Mode = "Toggle",
        Default = "F",
        Callback = function()
            local player = game.Players.LocalPlayer
            local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if root then 
                root.CFrame = CFrame.new(0,10,0) 
                print("Teleported to preset location!") 
            end
        end
    })

    Tabs.Forest:AddButton({
        Title = "Teleport to Camp",
        Description = "Instantly teleport to coordinates 9, 4, -1",
        Callback = function()
            local player = game.Players.LocalPlayer
            local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if root then 
                root.CFrame = CFrame.new(9, 4, -1) 
                print("Teleported to: 9, 4, -1") 
            else 
                warn("Cannot teleport: HumanoidRootPart not found.") 
            end
        end
    })
end
-- ======================= Teleport to Player - Main Tab =======================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function GetPlayerList()
    local names = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            table.insert(names, plr.Name)
        end
    end
    return names
end

local SelectedPlayer = nil

Tabs.Main:AddDropdown("PlayerList", {
    Title = "Choose Player",
    Values = GetPlayerList(),
    Multi = false,
    Default = nil,
    Callback = function(Value)
        SelectedPlayer = Value
        Fluent:Notify({
            Title = "Player Selected",
            Content = "Selected: " .. Value,
            Duration = 4
        })
    end
})

Tabs.Main:AddButton({
    Title = "Teleport to Player",
    Description = "Teleports you to the chosen player",
    Callback = function()
        if SelectedPlayer then
            local Target = Players:FindFirstChild(SelectedPlayer)
            if Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character:MoveTo(Target.Character.HumanoidRootPart.Position + Vector3.new(0,3,0))
                Fluent:Notify({
                    Title = "Teleported",
                    Content = "You teleported to " .. SelectedPlayer,
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "Error",
                    Content = "Target not found or not loaded.",
                    Duration = 5
                })
            end
        else
            Fluent:Notify({
                Title = "No Player Selected",
                Content = "Please choose a player first.",
                Duration = 5
            })
        end
    end
})

Tabs.Main:AddButton({
    Title = "Teleport to Random Player",
    Description = "Teleports you to a random player in the server",
    Callback = function()
        local PlayerList = GetPlayerList()
        if #PlayerList > 0 then
            local RandomName = PlayerList[math.random(1, #PlayerList)]
            local Target = Players:FindFirstChild(RandomName)
            if Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character:MoveTo(Target.Character.HumanoidRootPart.Position + Vector3.new(0,3,0))
                Fluent:Notify({
                    Title = "Teleported",
                    Content = "You teleported to random player: " .. RandomName,
                    Duration = 5
                })
            end
        else
            Fluent:Notify({
                Title = "No Players",
                Content = "No players available to teleport.",
                Duration = 5
            })
        end
    end
})

-- ======================= Targeting Tab =======================
Tabs.PlayerTarget:AddDropdown("TargetPlayer",{Title="Select Player",Values=getPlayerNames(),Multi=false,Default=1}):OnChanged(function(val) targetPlayer = Players:FindFirstChild(val) end)
Tabs.PlayerTarget:AddToggle("AimAtPlayer",{Title="Aim at Target",Default=false}):OnChanged(function(val) State.AimAtPlayer=val end)
Tabs.PlayerTarget:AddToggle("HighlightTarget",{Title="Highlight Target",Default=false}):OnChanged(function(val) State.HighlightPlayer=val end)
Tabs.PlayerTarget:AddSlider("TargetDistance",{Title="Target Distance",Min=1,Max=50,Default=5,Rounding=1}):OnChanged(function(val) State.TargetDistance=val end)

-- ======================= Protection Tab =======================
Tabs.Protection:AddToggle("AntiFling",{Title="Anti-Fling",Default=false}):OnChanged(function(val) State.AntiFling=val end)
Tabs.Protection:AddToggle("AntiVoid",{Title="Anti-Void",Default=false}):OnChanged(function(val) State.AntiVoid=val end)
Tabs.Protection:AddToggle("AntiAFK",{Title="Anti-AFK",Default=false}):OnChanged(function(val) State.AntiAFK=val end)
Tabs.Protection:AddToggle("AntiTeleport",{Title="Anti-Teleport",Default=false}):OnChanged(function(val) State.AntiTeleport=val end)
Tabs.Protection:AddToggle("AntiLoopKill",{Title="Anti Loop Kill",Default=false}):OnChanged(function(val) State.AntiLoopKill=val end)

-- ======================= Settings Tab =======================
Tabs.Settings:AddParagraph({Title="Settings", Content="Configure your ShadowCore GUI and save/load options here."})
Tabs.Settings:AddButton({Title="Reset GUI", Description="Resets window position and theme", Callback=function() Window:Reset() end})

-- ======================= Save / Interface Managers =======================
do
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({})
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")
    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)
end
