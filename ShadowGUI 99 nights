--// Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

--// Create Window
local Window = Rayfield:CreateWindow({
    Name = "ShadowCore",
    LoadingTitle = "Shadows Code",
    LoadingSubtitle = "By Sin",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MIJBarbarinGUI", -- Create a custom folder for your hub/game
        FileName = "MainConfig"
    },
    Discord = {
        Enabled = true,
        Invite = "https://discord.gg/vSGuzg75", -- The Discord invite code, do not include discord.gg/
        RememberJoins = false -- Set to false to make them join every time they load
    },
    KeySystem = true, -- Enable Rayfield's built-in key system
    KeySettings = {
        Title = "Shadow Hub",
        Subtitle = "ShadowKey System",
        Note = "Get the key from our discord (https://discord.gg/vSGuzg75)",
        FileName = "SiriusKey",
        SaveKey = false,
        GrabKeyFromSite = false, -- Set to true if you want to fetch key from a URL
        Key = "MIJSHADOWKEY"
    }
})

local MainTab = Window:CreateTab("Main", nil)
MainTab:CreateSection("Main Features")


-- WalkSpeed
MainTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 100},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(Value)
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.WalkSpeed = Value end
    end
})




--Advance Esp Players
local ESPTab = Window:CreateTab("ESP", nil)
ESPTab:CreateSection("ESP Features")

local RunService = game:GetService("RunService")
local Players = game.Players
local LocalPlayer = Players.LocalPlayer

ESPTab:CreateToggle({
    Name = "ESP Players",
    CurrentValue = false,
    Callback = function(Value)
        _G.ESPPlayers = Value
        
        local espData = {}

        local function createHealthBar(character)
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESPHealthBar"
            billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
            billboard.Size = UDim2.new(4, 0, 0.5, 0)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true

            local background = Instance.new("Frame")
            background.Size = UDim2.new(1, 0, 1, 0)
            background.BackgroundColor3 = Color3.new(0, 0, 0)
            background.BackgroundTransparency = 0.6
            background.BorderSizePixel = 0
            background.Parent = billboard

            local healthBar = Instance.new("Frame")
            healthBar.Name = "HealthBar"
            healthBar.Size = UDim2.new(1, 0, 1, 0)
            healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            healthBar.BorderSizePixel = 0
            healthBar.Parent = background

            billboard.Parent = character

            return healthBar
        end

        local function createCoordLabel(character)
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESPCoords"
            billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
            billboard.Size = UDim2.new(4, 0, 1, 0)
            billboard.StudsOffset = Vector3.new(0, 4.5, 0)
            billboard.AlwaysOnTop = true

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.new(1, 1, 1)
            textLabel.TextStrokeTransparency = 0
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextSize = 14
            textLabel.Text = ""
            textLabel.Parent = billboard

            billboard.Parent = character

            return textLabel
        end
        
        local function createNameLabel(character, playerName)
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESPName"
            billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
            billboard.Size = UDim2.new(4, 0, 1, 0)
            billboard.StudsOffset = Vector3.new(0, 5.5, 0)
            billboard.AlwaysOnTop = true

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.new(1, 1, 0) -- Yellow color for name
            textLabel.TextStrokeTransparency = 0
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextSize = 16
            textLabel.Text = playerName
            textLabel.Parent = billboard

            billboard.Parent = character

            return textLabel
        end

        spawn(function()
            while _G.ESPPlayers do
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local char = player.Character

                        -- Highlight
                        if not char:FindFirstChild("ESPHighlight") then
                            local highlight = Instance.new("Highlight")
                            highlight.Name = "ESPHighlight"
                            highlight.Adornee = char
                            highlight.FillColor = Color3.fromRGB(255, 0, 0)
                            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                            highlight.Parent = char
                        end

                        -- Health bar
                        if not char:FindFirstChild("ESPHealthBar") then
                            local healthBar = createHealthBar(char)
                            espData[char] = espData[char] or {}
                            espData[char].HealthBar = healthBar
                        end

                        -- Coordinate label
                        if not char:FindFirstChild("ESPCoords") then
                            local coordLabel = createCoordLabel(char)
                            espData[char] = espData[char] or {}
                            espData[char].CoordLabel = coordLabel
                        end
                        
                        -- Name label
                        if not char:FindFirstChild("ESPName") then
                            local nameLabel = createNameLabel(char, player.Name)
                            espData[char] = espData[char] or {}
                            espData[char].NameLabel = nameLabel
                        end

                        -- Update health bar and coordinates
                        local humanoid = char:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            local healthBar = espData[char] and espData[char].HealthBar
                            if healthBar then
                                local healthPercent = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                                healthBar.Size = UDim2.new(healthPercent, 0, 1, 0)
                                healthBar.BackgroundColor3 = Color3.fromHSV(healthPercent * 0.3, 1, 1)
                            end
                        end

                        local coordLabel = espData[char] and espData[char].CoordLabel
                        if coordLabel then
                            local pos = char.HumanoidRootPart.Position
                            coordLabel.Text = string.format("X: %.1f Y: %.1f Z: %.1f", pos.X, pos.Y, pos.Z)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)

        if not Value then
            for _, player in pairs(Players:GetPlayers()) do
                local char = player.Character
                if char then
                    local highlight = char:FindFirstChild("ESPHighlight")
                    if highlight then highlight:Destroy() end
                    local healthBarGui = char:FindFirstChild("ESPHealthBar")
                    if healthBarGui then healthBarGui:Destroy() end
                    local coordLabelGui = char:FindFirstChild("ESPCoords")
                    if coordLabelGui then coordLabelGui:Destroy() end
                    local nameLabelGui = char:FindFirstChild("ESPName")
                    if nameLabelGui then nameLabelGui:Destroy() end
                end
            end
            espData = {}
        end
    end
})


-- ESP Items
ESPTab:CreateToggle({
    Name = "ESP Items",
    CurrentValue = false,
    Callback = function(Value)
        _G.ESPItems = Value
        while _G.ESPItems do
            for _, item in pairs(workspace:GetDescendants()) do
                if item:IsA("Tool") or (item:IsA("Model") and item:FindFirstChild("Handle")) then
                    if not item:FindFirstChild("ESPHighlight") then
                        local highlight = Instance.new("Highlight")
                        highlight.Name = "ESPHighlight"
                        highlight.Adornee = item
                        highlight.FillColor = Color3.fromRGB(0, 255, 0)
                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                        highlight.Parent = item
                    end
                end
            end
            task.wait(2)
        end
        for _, item in pairs(workspace:GetDescendants()) do
            if item:FindFirstChild("ESPHighlight") then
                item.ESPHighlight:Destroy()
            end
        end
    end
})

--extra admin Tab
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- Create Admin Tab
local AdminTab = Window:CreateTab("Admin", nil)
AdminTab:CreateSection("Teleport & Admin Commands")

-- Teleport to Spawn Button
AdminTab:CreateButton({
    Name = "Teleport to Spawn",
    Callback = function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local spawnPart = Workspace:FindFirstChild("SpawnLocation") -- Adjust if your spawn part has a different name

        if spawnPart then
            local hrp = character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = spawnPart.CFrame + Vector3.new(0, 5, 0)
            else
                warn("HumanoidRootPart not found!")
            end
        else
            warn("Spawn location not found!")
        end
    end
})

--No Clip
local RunService = game:GetService("RunService")
local noclipEnabled = false
local noclipConnection

AdminTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Callback = function(Value)
        noclipEnabled = Value
        
        if noclipEnabled then
            noclipConnection = RunService.Stepped:Connect(function()
                local character = game.Players.LocalPlayer.Character
                if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end

            -- Re-enable collisions when NoClip is off
            local character = game.Players.LocalPlayer.Character
            if character then
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})


local NightsTab = Window:CreateTab("Nights", nil)
NightsTab:CreateSection("Nights Features")

--esp Chests
NightsTab:CreateToggle({
    Name = "ESP Chests Only",
    CurrentValue = false,
    Callback = function(state)
        _G.ItemChestESP = state

        -- Remove ESP if turned off
        if not state then
            for _, v in ipairs(workspace:GetDescendants()) do
                if v:IsA("Highlight") and v.Name == "ItemChestESPHighlight" then
                    v:Destroy()
                elseif v:IsA("BillboardGui") and v.Name == "ItemChestDistanceLabel" then
                    v:Destroy()
                end
            end
            return
        end

        local chestNames = {
            "Item Chest", "Item Chest2", "Item Chest3", "Item Chest4", "Item Chest5"
        }

        -- ESP loop
        task.spawn(function()
            while _G.ItemChestESP do
                for _, chest in ipairs(workspace:GetDescendants()) do
                    if chest:IsA("Model") and table.find(chestNames, chest.Name) then
                        -- Add highlight
                        if not chest:FindFirstChild("ItemChestESPHighlight") then
                            local highlight = Instance.new("Highlight")
                            highlight.Name = "ItemChestESPHighlight"
                            highlight.FillColor = Color3.fromRGB(255, 215, 0)
                            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                            highlight.Parent = chest
                        end

                        -- Add distance label (name + distance)
                        if not chest:FindFirstChild("ItemChestDistanceLabel") then
                            local billboard = Instance.new("BillboardGui")
                            billboard.Name = "ItemChestDistanceLabel"
                            billboard.Size = UDim2.new(0, 150, 0, 30)
                            billboard.StudsOffset = Vector3.new(0, 3, 0)
                            billboard.AlwaysOnTop = true
                            billboard.Parent = chest

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            textLabel.TextStrokeTransparency = 0
                            textLabel.TextScaled = true
                            textLabel.Parent = billboard
                        end

                        -- Update text
                        local billboard = chest:FindFirstChild("ItemChestDistanceLabel")
                        local playerPos = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if billboard and playerPos and chest.PrimaryPart then
                            local textLabel = billboard:FindFirstChildOfClass("TextLabel")
                            local distance = (playerPos.Position - chest.PrimaryPart.Position).Magnitude
                            textLabel.Text = string.format("%s - %.1f m", chest.Name, distance)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)
    end
})

--kill aura 
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Inventory = LocalPlayer:WaitForChild("Inventory")
local RemoteToolDamage = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("ToolDamageObject")

local allTargets = {
    "Bunny",
    "Cultist",
    "Wolf",
    "Alpha Wolf",
    "Bear",
    "Polar Bear",
    "Alien",
    "Alien Elite",
    "Arctic Fox",
    "Black Robe Cultists",
    "Red Robe Cultists",
}

-- Configuration defaults
local KillAuraEnabled = false
local attackRange = 30
local attackCooldown = 0.5
local lastAttackTimes = {}
local weaponPriority = {"Old Axe", "Good Axe", "Strong Axe", "Spear", "MorningStar", "Laser Sword", "Ice Sword"} -- ✅ Added here
local useWhitelist = true
local attackAllAtOnce = false
local targetWhitelist = {}
for _, name in ipairs(allTargets) do
    targetWhitelist[name] = true
end

local function findBestWeapon()
    for _, weaponName in ipairs(weaponPriority) do
        local weapon = Inventory:FindFirstChild(weaponName)
        if weapon then
            return weapon
        end
    end
    return nil
end

local function isTargetValid(target, hrp)
    if not target or not target.PrimaryPart then return false end
    if useWhitelist and not targetWhitelist[target.Name] then return false end
    local dist = (target.PrimaryPart.Position - hrp.Position).Magnitude
    if dist > attackRange then return false end
    return true
end

-- UI Elements
local rangeSlider = NightsTab:CreateSlider({
    Name = "Attack Range",
    Range = {5, 100},
    Increment = 1,
    Suffix = " studs",
    CurrentValue = attackRange,
    Callback = function(value)
        attackRange = value
        print("[Kill Aura] Attack Range set to", attackRange)
    end,
})

local cooldownSlider = NightsTab:CreateSlider({
    Name = "Attack Cooldown",
    Range = {0.1, 2},
    Increment = 0.05,
    Suffix = " sec",
    CurrentValue = attackCooldown,
    Callback = function(value)
        attackCooldown = value
        print("[Kill Aura] Attack Cooldown set to", attackCooldown)
    end,
})

local whitelistToggle = NightsTab:CreateToggle({
    Name = "Use Target Whitelist",
    CurrentValue = useWhitelist,
    Callback = function(enabled)
        useWhitelist = enabled
        print("[Kill Aura] Use Whitelist:", useWhitelist)
    end,
})

local attackAllToggle = NightsTab:CreateToggle({
    Name = "Attack All Targets At Once",
    CurrentValue = attackAllAtOnce,
    Callback = function(enabled)
        attackAllAtOnce = enabled
        print("[Kill Aura] Attack All Targets At Once:", attackAllAtOnce)
    end,
})

local weaponDropdown = NightsTab:CreateDropdown({
    Name = "Weapon Priority",
    Options = {"Old Axe", "Good Axe", "Strong Axe", "Spear", "MorningStar", "Laser Sword", "Ice Sword"}, -- ✅ Added to UI dropdown
    CurrentOption = weaponPriority[1],
    MultiSelect = true,
    Callback = function(selection)
        if type(selection) == "table" then
            weaponPriority = selection
        else
            weaponPriority = {selection}
        end
        print("[Kill Aura] Weapon Priority set to:", table.concat(weaponPriority, ", "))
    end,
})

NightsTab:CreateToggle({
    Name = "Kill Aura (Advanced)",
    CurrentValue = false,
    Callback = function(enabled)
        KillAuraEnabled = enabled
        if KillAuraEnabled then
            print("[Kill Aura] Enabled")
            task.spawn(function()
                while KillAuraEnabled do
                    local char = LocalPlayer.Character
                    local hrp = char and char:FindFirstChild("HumanoidRootPart")
                    if not hrp then
                        task.wait(0.5)
                        continue
                    end

                    local weapon = findBestWeapon()
                    if not weapon then
                        warn("[Kill Aura] No weapon found in inventory!")
                        task.wait(1)
                        continue
                    end

                    local charactersFolder = Workspace:FindFirstChild("Characters")
                    if not charactersFolder then
                        task.wait(1)
                        continue
                    end

                    if attackAllAtOnce then
                        local attackedCount = 0
                        for _, target in pairs(charactersFolder:GetChildren()) do
                            if isTargetValid(target, hrp) then
                                local args = {
                                    target,
                                    weapon,
                                    "3_2356085033",
                                    target.PrimaryPart.CFrame,
                                }
                                local success, err = pcall(function()
                                    RemoteToolDamage:InvokeServer(unpack(args))
                                end)
                                if success then
                                    attackedCount = attackedCount + 1
                                else
                                    warn("[Kill Aura] ToolDamageObject invoke failed:", err)
                                end
                            end
                        end

                        if attackedCount > 0 then
                            game:GetService("StarterGui"):SetCore("SendNotification", {
                                Title = "Kill Aura",
                                Text = "Attacked all " .. attackedCount .. " targets at once with " .. weapon.Name,
                                Duration = 2,
                            })
                        end
                        task.wait(attackCooldown)
                    else
                        for _, target in pairs(charactersFolder:GetChildren()) do
                            if isTargetValid(target, hrp) then
                                local now = tick()
                                if not lastAttackTimes[target] or (now - lastAttackTimes[target]) >= attackCooldown then
                                    local args = {
                                        target,
                                        weapon,
                                        "3_2356085033",
                                        target.PrimaryPart.CFrame,
                                    }
                                    local success, err = pcall(function()
                                        RemoteToolDamage:InvokeServer(unpack(args))
                                    end)
                                    if success then
                                        lastAttackTimes[target] = now
                                    else
                                        warn("[Kill Aura] ToolDamageObject invoke failed:", err)
                                    end
                                    task.wait(0.1)
                                end
                            end
                        end
                    end

                    task.wait(0.1)
                end
            end)
        else
            print("[Kill Aura] Disabled")
            lastAttackTimes = {}
        end
    end,
})






local Lighting = game:GetService("Lighting")
local originalFog = {End = Lighting.FogEnd, Start = Lighting.FogStart}
local noFog = false

NightsTab:CreateToggle({
    Name = "No Fog",
    CurrentValue = false,
    Callback = function(enabled)
        noFog = enabled
        if enabled then
            Lighting.FogEnd = 100000
            Lighting.FogStart = 0
        else
            Lighting.FogEnd = originalFog.End
            Lighting.FogStart = originalFog.Start
        end
    end
})



NightsTab:CreateButton({
    Name = "Disable AFK Kick",
    Callback = function()
        for _, v in pairs(getconnections(game:GetService("Players").LocalPlayer.Idled)) do
            v:Disable()
        end
    end
})




-- === ESP GUI Integration for Selected Items (NightsTab) ===
NightsTab:CreateSection("Advanced Item ESP Features")

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- List of all possible items
local allItems = {
    "Scraps","Bolt","Sheet Metal","UFO","Junk",
    "Broken Fan","Broken Radio","UFO Component","Tyre",
    "Broken Microwave","Metal Chair","Old Car Engine",
    "Cultist Experiment","Washing Machine","Cultist Prototype",
    "UFO Scrap","Log"
}

-- State tables
local SelectedItems = {}
local ESPObjects = {}
local ESPEnabled = false
local AutoPickup = false
local PickupDistance = 10 -- default distance

-- === Create Checkbox Toggles for all items ===
for _, itemName in ipairs(allItems) do
    NightsTab:CreateToggle({
        Name = itemName,
        CurrentValue = false,
        Callback = function(state)
            SelectedItems[itemName] = state
            if not state and ESPObjects[itemName] then
                ESPObjects[itemName].Billboard:Destroy()
                ESPObjects[itemName] = nil
            end
        end
    })
end

-- === Pickup Distance Slider ===
NightsTab:CreateSlider({
    Name = "Pickup Distance",
    Range = {1,100},
    Increment = 1,
    CurrentValue = PickupDistance,
    Callback = function(val)
        PickupDistance = val
    end
})

-- === Auto Pickup Toggle ===
NightsTab:CreateToggle({
    Name = "Auto Teleport to Closest Item",
    CurrentValue = false,
    Callback = function(state)
        AutoPickup = state
    end
})

-- === Main ESP creation ===
local function createESP(item)
    if not item.PrimaryPart then
        item.PrimaryPart = item:FindFirstChild("Handle") or item:FindFirstChildWhichIsA("BasePart")
        if not item.PrimaryPart then return end
    end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESPGui"
    billboard.Adornee = item.PrimaryPart
    billboard.Size = UDim2.new(0,100,0,40)
    billboard.StudsOffset = Vector3.new(0,2,0)
    billboard.AlwaysOnTop = true
    billboard.Parent = item.PrimaryPart

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1,0,0.6,0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.fromRGB(255,255,255)
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextSize = 14
    textLabel.Text = item.Name
    textLabel.Parent = billboard

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Size = UDim2.new(1,0,0.4,0)
    distanceLabel.Position = UDim2.new(0,0,0.6,0)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.fromRGB(255,255,255)
    distanceLabel.Font = Enum.Font.Gotham
    distanceLabel.TextSize = 12
    distanceLabel.Text = "Distance: 0"
    distanceLabel.Parent = billboard

    ESPObjects[item] = {Billboard=billboard, DistanceLabel=distanceLabel}
end

-- === Update ESP each frame ===
RunService.RenderStepped:Connect(function()
    if not ESPEnabled then return end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local closestItem, closestDist = nil, math.huge

    for _, item in pairs(Workspace:GetDescendants()) do
        if SelectedItems[item.Name] and item.PrimaryPart then
            if not ESPObjects[item] then
                createESP(item)
            end

            local distance = (item.PrimaryPart.Position - hrp.Position).Magnitude
            local guiData = ESPObjects[item]
            guiData.DistanceLabel.Text = string.format("Distance: %.1f", distance)

            -- Color based on distance
            if distance < 20 then
                guiData.DistanceLabel.TextColor3 = Color3.fromRGB(0,255,0)
            elseif distance < 50 then
                guiData.DistanceLabel.TextColor3 = Color3.fromRGB(255,255,0)
            else
                guiData.DistanceLabel.TextColor3 = Color3.fromRGB(255,100,100)
            end

            if distance < closestDist then
                closestDist = distance
                closestItem = item
            end
        end
    end

    if AutoPickup and closestItem and closestDist <= PickupDistance then
        hrp.CFrame = closestItem.PrimaryPart.CFrame + Vector3.new(0,3,0)
    end
end)

-- === ESP Enable Toggle ===
NightsTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Callback = function(state)
        ESPEnabled = state
        if not state then
            for _, data in pairs(ESPObjects) do
                if data.Billboard then data.Billboard:Destroy() end
            end
            ESPObjects = {}
        end
    end
})
