--// Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

--// Window
local Window = Rayfield:CreateWindow({
    Name = "ShadowCore - 99 Nights in the Forest",
    LoadingTitle = "Shadows Code",
    LoadingSubtitle = "By Sin",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MIJBarbarinGUI",
        FileName = "MainConfig"
    },
    Discord = {
        Enabled = true,
        Invite = "vSGuzg75",
        RememberJoins = false
    },
    KeySystem = true,
    KeySettings = {
        Title = "Shadow Hub",
        Subtitle = "ShadowKey System",
        Note = "Get the key from our discord (https://discord.gg/vSGuzg75)",
        FileName = "SiriusKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = "MIJSHADOWKEY"
    }
})

--// Services / Locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer

--// Utility
local function notify(title, content, dur)
    Rayfield:Notify({Title = title or "ShadowCore", Content = content or "", Duration = dur or 3})
end

local function getHRP()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char and char:FindFirstChild("HumanoidRootPart")
end

--// Tabs
local DiscordTab   = Window:CreateTab("Discord", 4483362458)
local MainTab      = Window:CreateTab("Main", 6035047409)
local ESPTab       = Window:CreateTab("ESP", 6034287525)
local BringTab     = Window:CreateTab("Bring", 6035190846)
local VisualTab    = Window:CreateTab("Visual", 6034996695)
local TeleportsTab = Window:CreateTab("Teleports", 6035190846)
local AutoTab      = Window:CreateTab("Auto", 6035190846)
local NightsTab    = Window:CreateTab("Nights", 6035190846)

----------------------------------------------------------------
-- DISCORD
----------------------------------------------------------------
DiscordTab:CreateParagraph({
    Title = "ShadowCore Discord",
    Content = "Join for keys, updates, support:\nhttps://discord.gg/vSGuzg75"
})
DiscordTab:CreateButton({
    Name = "Copy Discord Link",
    Callback = function()
        local ok = pcall(function()
            if setclipboard then setclipboard("https://discord.gg/vSGuzg75") end
        end)
        if ok then
            notify("Copied!", "Discord link copied to clipboard.", 3)
        else
            notify("Heads up", "Your executor blocked clipboard; copy it manually from the paragraph.", 5)
        end
    end
})

----------------------------------------------------------------
-- MAIN (Player)
----------------------------------------------------------------
MainTab:CreateSection("Player Settings")

MainTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 200},
    Increment = 1,
    Suffix = " spd",
    CurrentValue = 16,
    Callback = function(v)
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.WalkSpeed = v end
    end
})

MainTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 300},
    Increment = 5,
    Suffix = " pow",
    CurrentValue = 50,
    Callback = function(v)
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.JumpPower = v end
    end
})

-- NoClip (Delta-friendly)
local noclipEnabled, noclipConn
MainTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Callback = function(state)
        noclipEnabled = state
        if state then
            noclipConn = RunService.Stepped:Connect(function()
                local char = LocalPlayer.Character
                if not char then return end
                for _, part in ipairs(char:GetChildren()) do
                    if part:IsA("BasePart") then part.CanCollide = false end
                end
            end)
        else
            if noclipConn then noclipConn:Disconnect() end
            local char = LocalPlayer.Character
            if char then
                for _, part in ipairs(char:GetChildren()) do
                    if part:IsA("BasePart") then part.CanCollide = true end
                end
            end
        end
    end
})

-- Anti AFK (VirtualUser for Delta)
MainTab:CreateButton({
    Name = "Enable Anti-AFK",
    Callback = function()
        local vu = game:GetService("VirtualUser")
        LocalPlayer.Idled:Connect(function()
            pcall(function()
                vu:CaptureController()
                vu:ClickButton2(Vector2.new())
            end)
        end)
        notify("Anti-AFK", "Enabled (VirtualUser).", 4)
    end
})

----------------------------------------------------------------
-- ESP (Players + Items)
----------------------------------------------------------------
ESPTab:CreateSection("ESP - Players")

local ESPPlayers = false
local espData = {}

local function createHealthBar(character)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "SC_ESP_Health"
    billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
    billboard.Size = UDim2.new(4, 0, 0.5, 0)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local bg = Instance.new("Frame")
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.BackgroundColor3 = Color3.new(0,0,0)
    bg.BackgroundTransparency = 0.5
    bg.BorderSizePixel = 0
    bg.Parent = billboard

    local bar = Instance.new("Frame")
    bar.Name = "Bar"
    bar.Size = UDim2.new(1, 0, 1, 0)
    bar.BackgroundColor3 = Color3.fromRGB(0,255,0)
    bar.BorderSizePixel = 0
    bar.Parent = bg

    billboard.Parent = character
    return bar
end

local function createNameLabel(character, nameText)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "SC_ESP_Name"
    billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
    billboard.Size = UDim2.new(4, 0, 1, 0)
    billboard.StudsOffset = Vector3.new(0, 5.25, 0)
    billboard.AlwaysOnTop = true

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,0)
    label.TextStrokeTransparency = 0
    label.Font = Enum.Font.GothamBold
    label.TextSize = 16
    label.Text = nameText
    label.Parent = billboard

    billboard.Parent = character
    return label
end

local function createCoordLabel(character)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "SC_ESP_Coord"
    billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
    billboard.Size = UDim2.new(4, 0, 1, 0)
    billboard.StudsOffset = Vector3.new(0, 4, 0)
    billboard.AlwaysOnTop = true

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.TextStrokeTransparency = 0
    label.Font = Enum.Font.GothamBold
    label.TextSize = 14
    label.Text = ""
    label.Parent = billboard

    billboard.Parent = character
    return label
end

ESPTab:CreateToggle({
    Name = "ESP Players (Highlight + Name + Health + Coords)",
    CurrentValue = false,
    Callback = function(state)
        ESPPlayers = state
        if state then
            task.spawn(function()
                while ESPPlayers do
                    for _, p in ipairs(Players:GetPlayers()) do
                        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                            local char = p.Character
                            -- Highlight
                            if not char:FindFirstChild("SC_ESP_Highlight") then
                                local hl = Instance.new("Highlight")
                                hl.Name = "SC_ESP_Highlight"
                                hl.Adornee = char
                                hl.FillColor = Color3.fromRGB(255, 0, 0)
                                hl.OutlineColor = Color3.fromRGB(255, 255, 255)
                                hl.Parent = char
                            end
                            -- Health
                            if not char:FindFirstChild("SC_ESP_Health") then
                                espData[char] = espData[char] or {}
                                espData[char].HealthBar = createHealthBar(char)
                            end
                            -- Name
                            if not char:FindFirstChild("SC_ESP_Name") then
                                espData[char] = espData[char] or {}
                                espData[char].Name = createNameLabel(char, p.Name)
                            end
                            -- Coords
                            if not char:FindFirstChild("SC_ESP_Coord") then
                                espData[char] = espData[char] or {}
                                espData[char].Coord = createCoordLabel(char)
                            end
                            -- Updates
                            local hum = char:FindFirstChildOfClass("Humanoid")
                            local hb = espData[char] and espData[char].HealthBar
                            if hum and hb then
                                local pct = math.clamp(hum.Health / math.max(hum.MaxHealth,1), 0, 1)
                                hb.Size = UDim2.new(pct,0,1,0)
                                hb.BackgroundColor3 = Color3.fromHSV(pct * 0.3, 1, 1)
                            end
                            local coordLabel = espData[char] and espData[char].Coord
                            local hrp = char:FindFirstChild("HumanoidRootPart")
                            if coordLabel and hrp then
                                local pos = hrp.Position
                                coordLabel.Text = string.format("X: %.1f  Y: %.1f  Z: %.1f", pos.X, pos.Y, pos.Z)
                            end
                        end
                    end
                    task.wait(0.4)
                end
            end)
        else
            -- cleanup
            for _, p in ipairs(Players:GetPlayers()) do
                if p.Character then
                    for _, n in ipairs({"SC_ESP_Highlight","SC_ESP_Health","SC_ESP_Name","SC_ESP_Coord"}) do
                        local obj = p.Character:FindFirstChild(n)
                        if obj then obj:Destroy() end
                    end
                end
            end
            espData = {}
        end
    end
})

ESPTab:CreateSection("ESP - Items (simple highlight)")
local ESPItems = false
ESPTab:CreateToggle({
    Name = "ESP Items (Tools/Models with Handle)",
    CurrentValue = false,
    Callback = function(state)
        ESPItems = state
        if state then
            task.spawn(function()
                while ESPItems do
                    for _, d in ipairs(Workspace:GetDescendants()) do
                        local isItem = d:IsA("Tool") or (d:IsA("Model") and d:FindFirstChild("Handle"))
                        if isItem and not d:FindFirstChild("SC_ESP_Item") then
                            local hl = Instance.new("Highlight")
                            hl.Name = "SC_ESP_Item"
                            hl.Adornee = d
                            hl.FillColor = Color3.fromRGB(0,255,0)
                            hl.OutlineColor = Color3.fromRGB(255,255,255)
                            hl.Parent = d
                        end
                    end
                    task.wait(1.5)
                end
            end)
        else
            for _, d in ipairs(Workspace:GetDescendants()) do
                local hl = d:FindFirstChild("SC_ESP_Item")
                if hl then hl:Destroy() end
            end
        end
    end
})

----------------------------------------------------------------
-- BRING (Multi-select via toggles + action)
----------------------------------------------------------------
BringTab:CreateSection("Bring (Select items then press Bring Selected)")
local bringToggles = {}
local bringList = {
    -- resources / items you want to support
    "Log","Scraps","Bolt","Sheet Metal","UFO","Junk",
    "Broken Fan","Broken Radio","UFO Component","Tyre",
    "Broken Microwave","Metal Chair","Old Car Engine",
    "Cultist Experiment","Washing Machine","Cultist Prototype",
    "UFO Scrap","Fuel","Coal","Water","Food","Morsel","Steak","Bandage","MedKit","Berry",
}

for _, name in ipairs(bringList) do
    bringToggles[name] = false
    BringTab:CreateToggle({
        Name = name,
        CurrentValue = false,
        Callback = function(state)
            bringToggles[name] = state
        end
    })
end

local maxBringDist = 250
BringTab:CreateSlider({
    Name = "Max Bring Distance",
    Range = {25, 1000},
    Increment = 5,
    Suffix = " studs",
    CurrentValue = maxBringDist,
    Callback = function(v) maxBringDist = v end
})

local dropAfter = false
BringTab:CreateToggle({
    Name = "Drop After Bring (unweld if possible)",
    CurrentValue = false,
    Callback = function(state) dropAfter = state end
})

local function isNameSelected(n)
    for k, v in pairs(bringToggles) do
        if v and string.lower(n) == string.lower(k) then
            return true
        end
    end
    return false
end

local function bringSelected()
    local hrp = getHRP()
    if not hrp then notify("Bring", "Player HRP not found.", 3) return end

    local found, moved = 0, 0
    for _, d in ipairs(Workspace:GetDescendants()) do
        if d:IsA("Model") or d:IsA("Tool") then
            local pname = d.Name
            if isNameSelected(pname) then
                local prim = d.PrimaryPart or d:FindFirstChild("Handle") or d:FindFirstChildWhichIsA("BasePart")
                if prim then
                    found += 1
                    local dist = (prim.Position - hrp.Position).Magnitude
                    if dist <= maxBringDist then
                        -- try to set primary part
                        if not d.PrimaryPart then
                            pcall(function() d.PrimaryPart = prim end)
                        end
                        pcall(function()
                            prim.CFrame = hrp.CFrame * CFrame.new(0, 3, -3)
                            d:SetPrimaryPartCFrame(prim.CFrame)
                        end)
                        if dropAfter then
                            -- best-effort "drop": remove weld constraints on obvious children
                            for _, ch in ipairs(d:GetDescendants()) do
                                if ch:IsA("Weld") or ch:IsA("WeldConstraint") then
                                    pcall(function() ch:Destroy() end)
                                end
                            end
                        end
                        moved += 1
                        task.wait(0.02)
                    end
                end
            end
        end
    end
    notify("Bring", ("Found %d | Brought %d within %d studs."):format(found, moved, maxBringDist), 4)
end

BringTab:CreateButton({
    Name = "Bring Selected",
    Callback = bringSelected
})

BringTab:CreateSection("Quick Bring (common)")
BringTab:CreateButton({
    Name = "Bring Logs (nearby)",
    Callback = function()
        bringToggles["Log"] = true
        bringSelected()
        bringToggles["Log"] = false
    end
})
BringTab:CreateButton({
    Name = "Bring Sheet Metal (nearby)",
    Callback = function()
        bringToggles["Sheet Metal"] = true
        bringSelected()
        bringToggles["Sheet Metal"] = false
    end
})

----------------------------------------------------------------
-- VISUAL
----------------------------------------------------------------
VisualTab:CreateSection("Environment")

-- Fullbright / Night vision-ish
local fbEnabled = false
local oldBright, oldAmb, oldOutdoor
VisualTab:CreateToggle({
    Name = "Fullbright / Night Vision",
    CurrentValue = false,
    Callback = function(state)
        fbEnabled = state
        if state then
            oldBright, oldAmb, oldOutdoor = Lighting.Brightness, Lighting.Ambient, Lighting.OutdoorAmbient
            Lighting.Brightness = 3
            Lighting.Ambient = Color3.fromRGB(128,128,128)
            Lighting.OutdoorAmbient = Color3.fromRGB(128,128,128)
        else
            if oldBright then Lighting.Brightness = oldBright end
            if oldAmb then Lighting.Ambient = oldAmb end
            if oldOutdoor then Lighting.OutdoorAmbient = oldOutdoor end
        end
    end
})

-- No Fog
local originalFog = {End = Lighting.FogEnd, Start = Lighting.FogStart}
VisualTab:CreateToggle({
    Name = "No Fog",
    CurrentValue = false,
    Callback = function(enabled)
        if enabled then
            Lighting.FogEnd = 100000
            Lighting.FogStart = 0
        else
            Lighting.FogEnd = originalFog.End
            Lighting.FogStart = originalFog.Start
        end
    end
})

----------------------------------------------------------------
-- TELEPORTS
----------------------------------------------------------------
TeleportsTab:CreateSection("Quick Teleports")

local tpLocations = {
    ["Spawn"]  = function()
        local s = Workspace:FindFirstChild("SpawnLocation")
        return s and s.CFrame + Vector3.new(0,5,0)
    end,
    ["SpawnLocation"] = function()
        local p = Workspace:FindFirstChild("SpawnLocation")
        return p and p.CFrame + Vector3.new(0,5,0)
    end,
    ["CraftingBench"] = function()
        local p = Workspace:FindFirstChild("CraftingBench")
        return p and (p.CFrame or (p:FindFirstChildWhichIsA("BasePart") and p:FindFirstChildWhichIsA("BasePart").CFrame))
    end,
    ["Scrapper"] = function()
        local p = Workspace:FindFirstChild("Scrapper")
        return p and (p.CFrame or (p:FindFirstChildWhichIsA("BasePart") and p:FindFirstChildWhichIsA("BasePart").CFrame))
    end,
}

local chosenTP = "Spawn"

TeleportsTab:CreateDropdown({
    Name = "Select Location",
    Options = {"Spawn","SpawnLocation","CraftingBench","Scrapper"},
    CurrentOption = "Spawn",
    Callback = function(opt) chosenTP = opt end
})

TeleportsTab:CreateButton({
    Name = "Teleport Now",
    Callback = function()
        local hrp = getHRP()
        if not hrp then return end
        local resolver = tpLocations[chosenTP]
        local cf = resolver and resolver()
        if cf then
            hrp.CFrame = cf
            notify("Teleport", "Teleported to "..chosenTP, 3)
        else
            notify("Teleport", "Location not found in Workspace.", 4)
        end
    end
})


----------------------------------------------------------------
-- AUTO (placeholders for your logic)
----------------------------------------------------------------
AutoTab:CreateSection("Automation")

AutoTab:CreateToggle({
    Name = "Auto Farm Logs",
    CurrentValue = false,
    Callback = function(enabled)
        notify("Auto Farm Logs", "State: " .. tostring(enabled), 3)

        if enabled then
            task.spawn(function()
                while enabled do
                    -- Look for the Log model in Workspace
                    local log = Workspace:FindFirstChild("Log")
                    local hrp = getHRP()
                    
                    if log and hrp then
                        -- Teleport to the Log model's primary part or first BasePart
                        if log:IsA("Model") then
                            local primary = log.PrimaryPart or log:FindFirstChildWhichIsA("BasePart")
                            if primary then
                                hrp.CFrame = primary.CFrame + Vector3.new(0, 3, 0)
                            end
                        elseif log:IsA("BasePart") then
                            hrp.CFrame = log.CFrame + Vector3.new(0, 3, 0)
                        end
                    end
                    
                    task.wait(1) -- adjust this delay for faster/slower teleporting
                end
            end)
        end
    end
})

----------------------------------------------------------------
-- NIGHTS (Advanced stuff: Chests ESP, Kill Aura, Item ESP w/ distance + auto-tp)
----------------------------------------------------------------
NightsTab:CreateSection("Chests ESP")
NightsTab:CreateToggle({
    Name = "ESP Chests Only (name + distance)",
    CurrentValue = false,
    Callback = function(state)
        _G.SC_ItemChestESP = state
        if not state then
            for _, v in ipairs(Workspace:GetDescendants()) do
                if (v:IsA("Highlight") and v.Name == "SC_Chest_HL") or
                   (v:IsA("BillboardGui") and v.Name == "SC_Chest_Label") then
                    v:Destroy()
                end
            end
            return
        end
        local chestNames = {"Item Chest","Item Chest2","Item Chest3","Item Chest4","Item Chest5"}
        task.spawn(function()
            while _G.SC_ItemChestESP do
                local hrp = getHRP()
                for _, chest in ipairs(Workspace:GetDescendants()) do
                    if chest:IsA("Model") and table.find(chestNames, chest.Name) then
                        if not chest:FindFirstChild("SC_Chest_HL") then
                            local hl = Instance.new("Highlight")
                            hl.Name = "SC_Chest_HL"
                            hl.FillColor = Color3.fromRGB(255,215,0)
                            hl.OutlineColor = Color3.fromRGB(255,255,255)
                            hl.Parent = chest
                        end
                        if not chest:FindFirstChild("SC_Chest_Label") then
                            local bb = Instance.new("BillboardGui")
                            bb.Name = "SC_Chest_Label"
                            bb.Size = UDim2.new(0,140,0,28)
                            bb.StudsOffset = Vector3.new(0,3,0)
                            bb.AlwaysOnTop = true
                            bb.Parent = chest
                            local txt = Instance.new("TextLabel")
                            txt.BackgroundTransparency = 1
                            txt.Size = UDim2.new(1,0,1,0)
                            txt.Font = Enum.Font.GothamBold
                            txt.TextColor3 = Color3.fromRGB(255,255,255)
                            txt.TextScaled = true
                            txt.Text = chest.Name
                            txt.Parent = bb
                        end
                        local bb = chest:FindFirstChild("SC_Chest_Label")
                        if bb and hrp and chest.PrimaryPart then
                            local tl = bb:FindFirstChildOfClass("TextLabel")
                            local dist = (hrp.Position - chest.PrimaryPart.Position).Magnitude
                            tl.Text = string.format("%s - %.1f m", chest.Name, dist)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)
    end
})

NightsTab:CreateSection("Kill Aura (Advanced)")

-- Kill Aura config/state
local KillAuraEnabled = false
local attackRange = 30
local attackCooldown = 0.5
local lastAttackTimes = {}
local useWhitelist = true
local attackAllAtOnce = false
local weaponPriority = {"Old Axe","Good Axe","Strong Axe","Spear","MorningStar","Laser Sword","Ice Sword"}

local allTargets = {
    "Bunny","Cultist","Wolf","Alpha Wolf","Bear","Polar Bear","Alien","Alien Elite",
    "Arctic Fox","Black Robe Cultists","Red Robe Cultists"
}
local targetWhitelist = {}
for _, n in ipairs(allTargets) do targetWhitelist[n] = true end

local function findBestWeapon()
    local inv = LocalPlayer:FindFirstChild("Inventory")
    if not inv then return nil end
    for _, w in ipairs(weaponPriority) do
        local f = inv:FindFirstChild(w)
        if f then return f end
    end
    return nil
end

local function isTargetValid(target, hrp)
    if not target or not target.PrimaryPart then return false end
    if useWhitelist and not targetWhitelist[target.Name] then return false end
    local dist = (target.PrimaryPart.Position - hrp.Position).Magnitude
    return dist <= attackRange
end

NightsTab:CreateSlider({
    Name = "Attack Range",
    Range = {5, 100},
    Increment = 1,
    Suffix = " studs",
    CurrentValue = attackRange,
    Callback = function(v) attackRange = v end
})
NightsTab:CreateSlider({
    Name = "Attack Cooldown",
    Range = {0.1, 2},
    Increment = 0.05,
    Suffix = " sec",
    CurrentValue = attackCooldown,
    Callback = function(v) attackCooldown = v end
})
NightsTab:CreateToggle({
    Name = "Use Target Whitelist",
    CurrentValue = useWhitelist,
    Callback = function(v) useWhitelist = v end
})
NightsTab:CreateToggle({
    Name = "Attack All Targets At Once",
    CurrentValue = attackAllAtOnce,
    Callback = function(v) attackAllAtOnce = v end
})
NightsTab:CreateDropdown({
    Name = "Weapon Priority (pick one for display; order is in code)",
    Options = weaponPriority,
    CurrentOption = weaponPriority[1],
    Callback = function(val)
        -- Keeping full priority list static; you can reorder weaponPriority manually above if needed.
        notify("Kill Aura", "Priority head set to: "..tostring(val), 3)
    end
})

NightsTab:CreateToggle({
    Name = "Kill Aura (Advanced)",
    CurrentValue = false,
    Callback = function(enabled)
        KillAuraEnabled = enabled
        if enabled then
            notify("Kill Aura", "Enabled", 3)
            local RemoteToolDamage = ReplicatedStorage:FindFirstChild("RemoteEvents") and ReplicatedStorage.RemoteEvents:FindFirstChild("ToolDamageObject")
            task.spawn(function()
                while KillAuraEnabled do
                    local hrp = getHRP()
                    if not hrp then task.wait(0.5) continue end
                    local weapon = findBestWeapon()
                    if not weapon or not RemoteToolDamage then
                        task.wait(1)
                        continue
                    end
                    local charactersFolder = Workspace:FindFirstChild("Characters")
                    if not charactersFolder then task.wait(0.5) continue end

                    if attackAllAtOnce then
                        local hits = 0
                        for _, tgt in ipairs(charactersFolder:GetChildren()) do
                            if isTargetValid(tgt, hrp) then
                                local args = {tgt, weapon, "3_2356085033", tgt.PrimaryPart.CFrame}
                                pcall(function() RemoteToolDamage:InvokeServer(unpack(args)) end)
                                hits += 1
                            end
                        end
                        if hits > 0 then
                            pcall(function()
                                StarterGui:SetCore("SendNotification", {Title="Kill Aura", Text=("Attacked %d targets."):format(hits), Duration=2})
                            end)
                        end
                        task.wait(attackCooldown)
                    else
                        for _, tgt in ipairs(charactersFolder:GetChildren()) do
                            if isTargetValid(tgt, hrp) then
                                local now = tick()
                                if not lastAttackTimes[tgt] or (now - lastAttackTimes[tgt]) >= attackCooldown then
                                    local args = {tgt, weapon, "3_2356085033", tgt.PrimaryPart.CFrame}
                                    pcall(function() RemoteToolDamage:InvokeServer(unpack(args)) end)
                                    lastAttackTimes[tgt] = now
                                    task.wait(0.05)
                                end
                            end
                        end
                        task.wait(0.05)
                    end
                end
            end)
        else
            notify("Kill Aura", "Disabled", 3)
            lastAttackTimes = {}
        end
    end
})

NightsTab:CreateSection("Advanced Item ESP + Auto TP (Closest)")
local ItemESPEnabled = false
local AutoTPEnabled = false
local AutoTPDistance = 10
local SelectedItems = {}
local ESPObjects = {}

local allItems = {
     "Log","Scraps","Bolt","Sheet Metal","UFO","Junk",
    "Broken Fan","Broken Radio","UFO Component","Tyre",
    "Broken Microwave","Metal Chair","Old Car Engine",
    "Cultist Experiment","Washing Machine","Cultist Prototype",
    "UFO Scrap","Fuel","Coal","Water","Food","Morsel","Steak","Bandage","MedKit","Berry",
}

for _, itemName in ipairs(allItems) do
    SelectedItems[itemName] = false
    NightsTab:CreateToggle({
        Name = "ESP: "..itemName,
        CurrentValue = false,
        Callback = function(state)
            SelectedItems[itemName] = state
            -- cleanup existing objects for this name
            for inst, data in pairs(ESPObjects) do
                if inst.Name == itemName and data.Billboard then
                    data.Billboard:Destroy()
                    ESPObjects[inst] = nil
                end
            end
        end
    })
end

NightsTab:CreateSlider({
    Name = "Auto TP Distance",
    Range = {1, 100},
    Increment = 1,
    Suffix = " studs",
    CurrentValue = AutoTPDistance,
    Callback = function(v) AutoTPDistance = v end
})

NightsTab:CreateToggle({
    Name = "Auto Teleport to Closest Selected Item",
    CurrentValue = false,
    Callback = function(state) AutoTPEnabled = state end
})

local function createItemBillboard(item)
    local base = item.PrimaryPart or item:FindFirstChild("Handle") or item:FindFirstChildWhichIsA("BasePart")
    if not base then return end
    local bb = Instance.new("BillboardGui")
    bb.Name = "SC_ItemESP"
    bb.Adornee = base
    bb.Size = UDim2.new(0,120,0,36)
    bb.StudsOffset = Vector3.new(0,2,0)
    bb.AlwaysOnTop = true
    bb.Parent = base

    local nameL = Instance.new("TextLabel")
    nameL.BackgroundTransparency = 1
    nameL.Size = UDim2.new(1,0,0.6,0)
    nameL.Font = Enum.Font.GothamBold
    nameL.TextColor3 = Color3.fromRGB(255,255,255)
    nameL.TextScaled = true
    nameL.Text = item.Name
    nameL.Parent = bb

    local distL = Instance.new("TextLabel")
    distL.BackgroundTransparency = 1
    distL.Position = UDim2.new(0,0,0.6,0)
    distL.Size = UDim2.new(1,0,0.4,0)
    distL.Font = Enum.Font.Gotham
    distL.TextColor3 = Color3.fromRGB(255,255,255)
    distL.TextScaled = true
    distL.Text = "Distance: 0"
    distL.Parent = bb

    ESPObjects[item] = {Billboard = bb, DistLabel = distL}
end

NightsTab:CreateToggle({
    Name = "Enable Item ESP (Selected Items)",
    CurrentValue = false,
    Callback = function(state)
        ItemESPEnabled = state
        if not state then
            for _, data in pairs(ESPObjects) do
                if data.Billboard then data.Billboard:Destroy() end
            end
            ESPObjects = {}
        end
    end
})

RunService.RenderStepped:Connect(function()
    if not ItemESPEnabled then return end
    local hrp = getHRP()
    if not hrp then return end

    local closest, closestDist = nil, math.huge
    for _, d in ipairs(Workspace:GetDescendants()) do
        if SelectedItems[d.Name] then
            local base = d.PrimaryPart or d:FindFirstChild("Handle") or d:FindFirstChildWhichIsA("BasePart")
            if base then
                if not ESPObjects[d] or not ESPObjects[d].Billboard or not ESPObjects[d].Billboard.Parent then
                    createItemBillboard(d)
                end
                local dist = (base.Position - hrp.Position).Magnitude
                local info = ESPObjects[d]
                if info and info.DistLabel then
                    info.DistLabel.Text = ("Distance: %.1f"):format(dist)
                    if dist < 20 then
                        info.DistLabel.TextColor3 = Color3.fromRGB(0,255,0)
                    elseif dist < 50 then
                        info.DistLabel.TextColor3 = Color3.fromRGB(255,255,0)
                    else
                        info.DistLabel.TextColor3 = Color3.fromRGB(255,100,100)
                    end
                end
                if dist < closestDist then
                    closestDist = dist
                    closest = base
                end
            end
        end
    end

    if AutoTPEnabled and closest and closestDist <= AutoTPDistance then
        hrp.CFrame = closest.CFrame + Vector3.new(0,3,0)
    end
end)

NightsTab:CreateToggle({
    Name = "Tree Aura (Auto Chop)",
    CurrentValue = false,
    Callback = function(enabled)
        TreeAuraEnabled = enabled
        if TreeAuraEnabled then
            print("[Tree Aura] Enabled")
            task.spawn(function()
                while TreeAuraEnabled do
                    local char = LocalPlayer.Character
                    local hrp = char and char:FindFirstChild("HumanoidRootPart")
                    if not hrp then
                        task.wait(0.5)
                        continue
                    end

                    local axe = findBestAxe()
                    if not axe then
                        warn("[Tree Aura] No axe found in inventory!")
                        task.wait(1)
                        continue
                    end

                    local foliageFolder = Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("Foliage")
                    if not foliageFolder then
                        task.wait(1)
                        continue
                    end

                    for _, tree in pairs(foliageFolder:GetChildren()) do
                        if isTreeValid(tree, hrp) then
                            local now = tick()
                            if not lastChopTimes[tree] or (now - lastChopTimes[tree]) >= chopCooldown then
                                local args = {
                                    tree,
                                    axe,
                                    "4_2356085033", -- ✅ This is usually the tree hit code
                                    tree.PrimaryPart.CFrame,
                                }
                                local success, err = pcall(function()
                                    RemoteToolDamage:InvokeServer(unpack(args))
                                end)
                                if success then
                                    lastChopTimes[tree] = now
                                else
                                    warn("[Tree Aura] Chop failed:", err)
                                end
                                task.wait(0.1)
                            end
                        end
                    end

                    task.wait(0.1)
                end
            end)
        else
            print("[Tree Aura] Disabled")
            lastChopTimes = {}
        end
    end,
})





-- Done
notify("ShadowCore", "GUI Loaded. Enjoy!", 4)
