-- ======================= Visual Tab =======================
local camera = workspace.CurrentCamera
local defaultFOV = camera.FieldOfView
local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- ESP storage
local activeESP = {}
local activeItemESP = {}

-- Function to create a Billboard GUI for ESP
local function createBillboard(target, text, color)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Billboard"
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.Parent = target

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = color
    label.TextStrokeTransparency = 0
    label.Font = Enum.Font.SourceSansBold
    label.TextScaled = true
    label.Parent = billboard

    return billboard
end

-- Function to clear ESP
local function clearESP(storage)
    for _, v in pairs(storage) do
        if v and v.Parent then
            v:Destroy()
        end
    end
    table.clear(storage)
end

-- Visual Tab Content
do
    -- FOV Slider
    Tabs.Visual:AddSlider("FOVSlider", {
        Title = "Field of View",
        Description = "Change your camera FOV",
        Default = defaultFOV,
        Min = 40,
        Max = 120,
        Rounding = 0,
        Callback = function(Value)
            camera.FieldOfView = Value
        end
    })

    -- Reset FOV Button
    Tabs.Visual:AddButton({
        Title = "Reset FOV",
        Description = "Reset camera to default FOV",
        Callback = function()
            camera.FieldOfView = defaultFOV
        end
    })

    -- Fog Toggle
    Tabs.Visual:AddToggle("FogToggle", {
        Title = "Fog",
        Description = "Enable/Disable in-game fog",
        Default = true,
        Callback = function(State)
            if State then
                Lighting.FogEnd = 100
            else
                Lighting.FogEnd = 1e6
            end
        end
    })

    -- Fullbright Toggle
    local fullbrightConn
    Tabs.Visual:AddToggle("FullbrightToggle", {
        Title = "Fullbright / Night Vision",
        Description = "Brighten the game environment",
        Default = false,
        Callback = function(State)
            if State then
                Lighting.Ambient = Color3.new(1, 1, 1)
                Lighting.Brightness = 2
                fullbrightConn = Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
                    Lighting.Ambient = Color3.new(1, 1, 1)
                    Lighting.Brightness = 2
                end)
            else
                if fullbrightConn then fullbrightConn:Disconnect() end
                Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
                Lighting.Brightness = 1
            end
        end
    })

    -- Player ESP Toggle
    local playerESPConn
    Tabs.Visual:AddToggle("PlayerESP", {
        Title = "Player ESP",
        Description = "Show name and health of players",
        Default = false,
        Callback = function(State)
            if State then
                playerESPConn = RunService.RenderStepped:Connect(function()
                    clearESP(activeESP)
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                            if humanoid then
                                local healthText = string.format("%s | HP: %d", player.Name, math.floor(humanoid.Health))
                                table.insert(activeESP, createBillboard(player.Character.Head, healthText, Color3.new(1, 1, 0)))
                            end
                        end
                    end
                end)
            else
                if playerESPConn then playerESPConn:Disconnect() end
                clearESP(activeESP)
            end
        end
    })

    -- Item ESP
    local trackedItems = {
        "Old Axe", "Good Axe", "Strong Axe", "Spear", "Morning Star", "Healing Potion"
    }
    local itemESPConn
    Tabs.Visual:AddToggle("ItemESP", {
        Title = "Item ESP",
        Description = "Show selected items through walls",
        Default = false,
        Callback = function(State)
            if State then
                itemESPConn = RunService.RenderStepped:Connect(function()
                    clearESP(activeItemESP)
                    for _, obj in ipairs(Workspace:GetDescendants()) do
                        if obj:IsA("Model") and table.find(trackedItems, obj.Name) and obj:FindFirstChild("PrimaryPart") then
                            table.insert(activeItemESP, createBillboard(obj.PrimaryPart, obj.Name, Color3.new(0, 1, 0)))
                        end
                    end
                end)
            else
                if itemESPConn then itemESPConn:Disconnect() end
                clearESP(activeItemESP)
            end
        end
    })

    -- Auto Teleport to Nearest Item
    local teleportConn
    local teleportDistance = 50
    Tabs.Visual:AddSlider("ItemTPDistance", {
        Title = "Item TP Distance",
        Description = "Max distance to auto-teleport to items",
        Default = 50,
        Min = 10,
        Max = 500,
        Rounding = 0,
        Callback = function(Value)
            teleportDistance = Value
        end
    })
    Tabs.Visual:AddToggle("AutoItemTP", {
        Title = "Auto TP to Item",
        Description = "Automatically teleport to nearest tracked item",
        Default = false,
        Callback = function(State)
            if State then
                teleportConn = RunService.Heartbeat:Connect(function()
                    local closest, dist
                    for _, obj in ipairs(Workspace:GetDescendants()) do
                        if obj:IsA("Model") and table.find(trackedItems, obj.Name) and obj:FindFirstChild("PrimaryPart") then
                            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - obj.PrimaryPart.Position).Magnitude
                            if distance <= teleportDistance and (not dist or distance < dist) then
                                closest, dist = obj, distance
                            end
                        end
                    end
                    if closest then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = closest.PrimaryPart.CFrame + Vector3.new(0, 3, 0)
                    end
                end)
            else
                if teleportConn then teleportConn:Disconnect() end
            end
        end
    })
end
