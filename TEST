local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "ShadowCore",         -- Updated title
    SubTitle = "By Sin",          -- Updated subtitle
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Exploits = Window:AddTab({ Title = "Exploits", Icon = "zap" })
}

local Options = Fluent.Options

-- ================= Main Tab Elements =================
do
    Fluent:Notify({ Title = "Notification", Content = "This is a notification", SubContent = "SubContent", Duration = 5 })

    Tabs.Main:AddParagraph({ Title = "Paragraph", Content = "This is a paragraph.\nSecond line!" })

    Tabs.Main:AddButton({
        Title = "Button",
        Description = "Very important button",
        Callback = function()
            Window:Dialog({
                Title = "Title",
                Content = "This is a dialog",
                Buttons = {
                    { Title = "Confirm", Callback = function() print("Confirmed the dialog.") end },
                    { Title = "Cancel", Callback = function() print("Cancelled the dialog.") end }
                }
            })
        end
    })

    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Toggle", Default = false })
    Toggle:OnChanged(function() print("Toggle changed:", Options.MyToggle.Value) end)
    Options.MyToggle:SetValue(false)

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Slider", Description = "This is a slider",
        Default = 2, Min = 0, Max = 5, Rounding = 1,
        Callback = function(Value) print("Slider was changed:", Value) end
    })
    Slider:OnChanged(function(Value) print("Slider changed:", Value) end)
    Slider:SetValue(3)

    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown", Values = {"one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen"},
        Multi = false, Default = 1
    })
    Dropdown:SetValue("four")
    Dropdown:OnChanged(function(Value) print("Dropdown changed:", Value) end)

    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown", Description = "You can select multiple values.",
        Values = {"one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen"},
        Multi = true, Default = {"seven","twelve"}
    })
    MultiDropdown:SetValue({ three=true, five=true, seven=false })
    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for k, v in next, Value do table.insert(Values, k) end
        print("Multidropdown changed:", table.concat(Values,", "))
    end)

    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {Title = "Colorpicker", Default = Color3.fromRGB(96,205,255)})
    Colorpicker:OnChanged(function() print("Colorpicker changed:", Colorpicker.Value) end)
    Colorpicker:SetValueRGB(Color3.fromRGB(0,255,140))

    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {Title="Colorpicker", Description="but you can change the transparency.", Transparency=0, Default=Color3.fromRGB(96,205,255)})
    TColorpicker:OnChanged(function() print("TColorpicker changed:", TColorpicker.Value, "Transparency:", TColorpicker.Transparency) end)

    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind", Mode = "Toggle", Default = "LeftControl",
        Callback = function(Value) print("Keybind clicked!", Value) end,
        ChangedCallback = function(New) print("Keybind changed!", New) end
    })
    Keybind:OnClick(function() print("Keybind clicked:", Keybind:GetState()) end)
    Keybind:OnChanged(function() print("Keybind changed:", Keybind.Value) end)
    task.spawn(function()
        while true do
            wait(1)
            if Keybind:GetState() then print("Keybind is being held down") end
            if Fluent.Unloaded then break end
        end
    end)
    Keybind:SetValue("MB2", "Toggle")

    local Input = Tabs.Main:AddInput("Input", {Title="Input", Default="Default", Placeholder="Placeholder", Numeric=false, Finished=false, Callback=function(Value) print("Input changed:", Value) end})
    Input:OnChanged(function() print("Input updated:", Input.Value) end)
end

-- ================= Exploits Tab =================
do
    local tab = Tabs.Exploits
    tab:AddSection("Exploits")

    -- ==== Auto Eat ====
    local autoEatEnabled, autoEatRange, autoEatConn = false, 300, nil
    local requestConsume = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestConsumeItem")
    local AllFoods = {"Morsel","Steak","Berry","Cooked Morsel","Cooked Steak","Cake","Carrot"}
    local SelectedFoods = AllFoods

    local function checkAndConsume()
        local char = LocalPlayer.Character
        if not char or not char:FindFirstChild("HumanoidRootPart") then return end
        local hrp = char.HumanoidRootPart
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and table.find(SelectedFoods,obj.Name) then
                local primaryPart = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
                if primaryPart and (primaryPart.Position-hrp.Position).Magnitude <= autoEatRange then
                    pcall(function() requestConsume:InvokeServer(obj) end)
                end
            end
        end
    end

    tab:AddDropdown({
        Title="Select Foods", Description="Choose foods to auto-eat",
        Options=AllFoods, MultiSelect=true, Default=AllFoods,
        Callback=function(selected) SelectedFoods=selected; Fluent:Notify({Title="Auto Eat", Content="Selected foods updated", Duration=2}) end
    })

    tab:AddButton({
        Title="Toggle Auto Eat", Description="Automatically consume selected foods",
        Callback=function()
            autoEatEnabled = not autoEatEnabled
            if autoEatEnabled then
                Fluent:Notify({Title="Auto Eat", Content="Enabled", Duration=2})
                autoEatConn = RunService.Heartbeat:Connect(function() if autoEatEnabled then checkAndConsume() end end)
            else
                Fluent:Notify({Title="Auto Eat", Content="Disabled", Duration=2})
                if autoEatConn then autoEatConn:Disconnect() end
            end
        end
    })

    -- ==== NoClip ====
    local noclipEnabled, noclipConn = false, nil
    tab:AddButton({
        Title="Toggle NoClip", Description="Enable/Disable NoClip",
        Callback=function()
            noclipEnabled = not noclipEnabled
            local char = LocalPlayer.Character
            if noclipEnabled then
                Fluent:Notify({Title="NoClip", Content="Enabled", Duration=2})
                noclipConn = RunService.Stepped:Connect(function()
                    if not char then return end
                    for _, part in ipairs(char:GetChildren()) do if part:IsA("BasePart") then part.CanCollide=false end end
                end)
            else
                Fluent:Notify({Title="NoClip", Content="Disabled", Duration=2})
                if noclipConn then noclipConn:Disconnect() end
                if char then for _, part in ipairs(char:GetChildren()) do if part:IsA("BasePart") then part.CanCollide=true end end end
            end
        end
    })

    -- ==== Kill Aura ====
    local KillAuraEnabled = false
    local attackRange, attackCooldown = 30, 0.5
    local lastAttackTimes = {}
    local useWhitelist, attackAllAtOnce = true, false
    local weaponPriority = {"Old Axe","Good Axe","Strong Axe","Spear","MorningStar","Laser Sword","Ice Sword"}
    local allTargets = {"Bunny","Cultist","Wolf","Alpha Wolf","Bear","Polar Bear","Alien","Alien Elite","Arctic Fox","Black Robe Cultists","Red Robe Cultists"}
    local targetWhitelist = {}
    for _, n in ipairs(allTargets) do targetWhitelist[n]=true end
    local RemoteToolDamage = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("ToolDamageObject")

    local function findBestWeapon()
        local inv = LocalPlayer:FindFirstChild("Inventory")
        if not inv then return nil end
        for _, w in ipairs(weaponPriority) do
            local f = inv:FindFirstChild(w)
            if f then return f end
        end
        return nil
    end

    local function isTargetValid(target,hrp)
        if not target or not target.PrimaryPart then return false end
        if useWhitelist and not targetWhitelist[target.Name] then return false end
        return (target.PrimaryPart.Position-hrp.Position).Magnitude<=attackRange
    end

    tab:AddSlider("AttackRange",{Title="Attack Range", Min=5, Max=100, Default=attackRange, Rounding=0, Suffix=" studs", Callback=function(v) attackRange=v end})
    tab:AddSlider("AttackCooldown",{Title="Attack Cooldown", Min=0.1, Max=2, Default=attackCooldown, Rounding=2, Suffix=" sec", Callback=function(v) attackCooldown=v end})
    tab:AddToggle("UseWhitelist",{Title="Use Target Whitelist", Default=useWhitelist, Callback=function(v) useWhitelist=v end})
    tab:AddToggle("AttackAllAtOnce",{Title="Attack All Targets At Once", Default=attackAllAtOnce, Callback=function(v) attackAllAtOnce=v end})

    tab:AddToggle("KillAura",{Title="Kill Aura", Default=false, Callback=function(enabled)
        KillAuraEnabled = enabled
        if enabled then
            Fluent:Notify({Title="Kill Aura", Content="Enabled", Duration=2})
            task.spawn(function()
                while KillAuraEnabled do
                    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if not hrp then task.wait(0.5) continue end
                    local weapon=findBestWeapon()
                    if not weapon then task.wait(1) continue end
                    local charactersFolder=Workspace:FindFirstChild("Characters")
                    if not charactersFolder then task.wait(0.5) continue end
                    if attackAllAtOnce then
                        for _,tgt in ipairs(charactersFolder:GetChildren()) do
                            if isTargetValid(tgt,hrp) then
                                pcall(function() RemoteToolDamage:InvokeServer(tgt,weapon,"3_"..tostring(weapon:GetAttribute("Owner") or ""),tgt.PrimaryPart.CFrame) end)
                            end
                        end
                        task.wait(attackCooldown)
                    else
                        for _,tgt in ipairs(charactersFolder:GetChildren()) do
                            if isTargetValid(tgt,hrp) then
                                local now=tick()
                                if not lastAttackTimes[tgt] or (now-lastAttackTimes[tgt])>=attackCooldown then
                                    pcall(function() RemoteToolDamage:InvokeServer(tgt,weapon,"3_"..tostring(weapon:GetAttribute("Owner") or ""),tgt.PrimaryPart.CFrame) end)
                                    lastAttackTimes[tgt]=now
                                end
                            end
                        end
                        task.wait(0.05)
                    end
                end
            end)
        else
            Fluent:Notify({Title="Kill Aura", Content="Disabled", Duration=2})
            lastAttackTimes={}
        end
    end})
end

-- ================= Managers =================
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("ShadowCore")
SaveManager:SetFolder("ShadowCore/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({Title="ShadowCore", Content="The script has been loaded.", Duration=8})
SaveManager:LoadAutoloadConfig()

